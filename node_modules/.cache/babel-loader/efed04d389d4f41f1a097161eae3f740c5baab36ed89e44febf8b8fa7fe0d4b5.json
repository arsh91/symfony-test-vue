{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  id: \"wrap\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"mb-4\"\n}, \"A demo of Listing all the Fruits\", -1 /* HOISTED */);\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <div>\\n    <h1>Fruits</h1>\\n    <div v-if=\\\"loading\\\">Loading...</div>\\n    <div v-else>\\n      <div>\\n        <label for=\\\"name\\\">Filter by name:</label>\\n        <input type=\\\"text\\\" id=\\\"name\\\" v-model=\\\"filters.name\\\">\\n      </div>\\n      <div>\\n        <label for=\\\"family\\\">Filter by family:</label>\\n        <input type=\\\"text\\\" id=\\\"family\\\" v-model=\\\"filters.family\\\">\\n      </div>\\n      <div v-if=\\\"fruits.length === 0\\\">\\n        No fruits found\\n      </div>\\n      <div v-else>\\n        <div v-for=\\\"fruit in fruits\\\" :key=\\\"fruit.id\\\">\\n          <h3>{{ fruit.name }}</h3>\\n          <div>Family: {{ fruit.family }}</div>\\n          <div>Order: {{ fruit.order }}</div>\\n          <div>Genus: {{ fruit.genus }}</div>\\n          <div>\\n            Nutritions:\\n            <ul>\\n              <li>Calories: {{ fruit.calories }}</li>\\n              <li>Fat: {{ fruit.fat }}</li>\\n              <li>Sugar: {{ fruit.sugar }}</li>\\n              <li>Carbohydrates: {{ fruit.carbohydrates }}</li>\\n              <li>Protein: {{ fruit.protein }}</li>\\n            </ul>\\n          </div>\\n          <button @click=\\\"toggleFavorite(fruit.fruit_id)\\\">\\n            {{ isFavorite(fruit.id) ? 'Remove from favorites' : 'Add to favorites' }}\\n          </button>\\n        </div>\\n        <div>\\n          <button v-if=\\\"page > 1\\\" @click=\\\"loadPage(page - 1)\\\">Previous page</button>\\n          <button v-if=\\\"page < totalPages\\\" @click=\\\"loadPage(page + 1)\\\">Next page</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div> \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"Loading...\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5))])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["id","class","_createElementVNode","_createCommentVNode","_hoisted_1","_hoisted_2","_hoisted_3","$data","loading","_createElementBlock","_hoisted_4","_hoisted_5"],"sources":["/home/code4each/Projects/fruits/fruitsapp/src/components/FruitListing.vue"],"sourcesContent":["<template>\n  <!-- <div>\n    <h1>Fruits</h1>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-else>\n      <div>\n        <label for=\"name\">Filter by name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"filters.name\">\n      </div>\n      <div>\n        <label for=\"family\">Filter by family:</label>\n        <input type=\"text\" id=\"family\" v-model=\"filters.family\">\n      </div>\n      <div v-if=\"fruits.length === 0\">\n        No fruits found\n      </div>\n      <div v-else>\n        <div v-for=\"fruit in fruits\" :key=\"fruit.id\">\n          <h3>{{ fruit.name }}</h3>\n          <div>Family: {{ fruit.family }}</div>\n          <div>Order: {{ fruit.order }}</div>\n          <div>Genus: {{ fruit.genus }}</div>\n          <div>\n            Nutritions:\n            <ul>\n              <li>Calories: {{ fruit.calories }}</li>\n              <li>Fat: {{ fruit.fat }}</li>\n              <li>Sugar: {{ fruit.sugar }}</li>\n              <li>Carbohydrates: {{ fruit.carbohydrates }}</li>\n              <li>Protein: {{ fruit.protein }}</li>\n            </ul>\n          </div>\n          <button @click=\"toggleFavorite(fruit.fruit_id)\">\n            {{ isFavorite(fruit.id) ? 'Remove from favorites' : 'Add to favorites' }}\n          </button>\n        </div>\n        <div>\n          <button v-if=\"page > 1\" @click=\"loadPage(page - 1)\">Previous page</button>\n          <button v-if=\"page < totalPages\" @click=\"loadPage(page + 1)\">Next page</button>\n        </div>\n      </div>\n    </div>\n  </div> -->\n\n\n    <div id=\"wrap\">\n      <div class=\"container\">\n          <h3 class=\"mb-4\">A demo of Listing all the Fruits</h3>\n          <div v-if=\"loading\">Loading...</div>\n          <div v-else>\n            </div>\n        </div>\n      </div>\n    \n</template>\n\n<script>\nimport axios from 'axios'\nimport { API_URL } from '@/config.js';\n\nexport default {\n  name: 'FruitList',\n  data() {\n    return {\n      loading: true,\n      fruits: [],\n      filters: {\n        name: '',\n        family: '',\n      },\n      page: 1,\n      totalPages: 1,\n      favorites: [],\n      url: API_URL, // Define URL globally\n    }\n  },\n  methods: {\n    loadPage(page) {\n      this.loading = true\n      axios.get(`${this.url}/fruits`, {\n        params: {\n          page,\n          name: this.filters.name,\n          family: this.filters.family,\n        },\n      }).then(response => {\n        this.fruits = response.data.fruits\n        this.totalPages = response.data.totalPages\n        this.loading = false\n      }).catch(error => {\n        console.log(error)\n        this.loading = false\n      })\n    },\n    toggleFavorite(id) {\n      if (this.isFavorite(id)) {\n        this.favorites = this.favorites.filter(favoriteId => favoriteId !== id)\n      } else {\n        this.favorites.push(id)\n      }\n    },\n    isFavorite(id) {\n      return this.favorites.includes(id)\n    },\n  },\n  mounted() {\n    this.loadPage(this.page)\n  },\n}\n</script>"],"mappings":";;EA6CSA,EAAE,EAAC;AAAM;;EACPC,KAAK,EAAC;AAAW;gCAClBC,mBAAA,CAAsD;EAAlDD,KAAK,EAAC;AAAM,GAAC,kCAAgC;;;;;;;;6DA9CzDE,mBAAA,ogDAyCU,EAGRD,mBAAA,CAOQ,OAPRE,UAOQ,GANNF,mBAAA,CAKQ,OALRG,UAKQ,GAJJC,UAAsD,EAC3CC,KAAA,CAAAC,OAAO,I,cAAlBC,mBAAA,CAAoC,OAAAC,UAAA,EAAhB,YAAU,M,cAC9BD,mBAAA,CACQ,OAAAE,UAAA,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}